{"version":3,"sources":["imge/outline.PNG","imge/croise.jpg","asset/moduls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NvBare","props","className","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","SubscribForm","memberListe","selectFriendButtons","useState","bundleDisplay","setBundleDisplay","inputText","setInputText","memberlist","listy","setListy","selectFriendButton","setSelectFriendButton","showSelectedFriend","setShowSelectedFriend","warningInfos","setWarningInfos","friendly","avatarFriendList","setAvatarFriendList","titleValue","settitleValue","handleClick","e","testValue","target","test","staySelectFriendButton","filter","name","length","splitted","split","addMember","friend1","friend2","friend3","friend4","friend5","friend6","key","nanoid","subscribt","initTab","filt","map","friend","onClick","src","croise","alt","outliner","avalableFriend","Button","variant","editTemplete","Form","Group","controlId","Label","Text","Control","placeholder","value","onChange","inputTexto","viewTemplete","show","sho","fri1","fri2","fri3","fri4","fri5","fri6","undefined","useEffect","document","title","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c26afc48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/outline.b2c46cc0.PNG\";","module.exports = __webpack_public_path__ + \"static/media/croise.9e45166b.jpg\";","import React, { useEffect , useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  { Button, Form }  from  'react-bootstrap' ;\r\nimport { nanoid } from \"nanoid\";\r\n//import connect from './connect.PNG';\r\nimport outliner from '../imge/outline.PNG';\r\nimport croise from '../imge/croise.jpg';\r\n\r\nexport function NvBare(props)\r\n{\r\n    return(<>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a href=\"google.com\" className=\"navbar-brand\">Navbar</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>    \r\n    </>)\r\n};\r\n\r\nlet disPlayingFriend = [];\r\n\r\nexport function SubscribForm(props){\r\n    //---bundle displaying state----------------------\r\n    const [bundleDisplay, setBundleDisplay] = useState(true);\r\n    //---store de value of input text---------------\r\n    const [inputText, setInputText] = useState(\"\");\r\n    //---the members' subscripted list local-state-----------\r\n    const [listy, setListy] = useState(props.memberlist);\r\n    //---the members' subscripted list local-state-----------\r\n    const [selectFriendButton, setSelectFriendButton] = useState(listy);\r\n    //---Show selected friends---------\r\n    const [showSelectedFriend, setShowSelectedFriend] = useState(\"your selected friends are: \");   \r\n    //---warning message----------------\r\n    const [warningInfos, setWarningInfos] = useState(\"The name must have more than 2 characters\"); \r\n    //---list of each avatar's friends-------\r\n    const [avatarFriendList, setAvatarFriendList] = useState(props.friendly);\r\n    //---title of the bundle-------\r\n    const [titleValue, settitleValue] = useState(\"Creating of a new account\");\r\n\r\n\r\n    //---OnChange event--------\r\n    const handleChange = (e) => {\r\n        const inputTexto = e.target.value;\r\n        setInputText(inputTexto);\r\n    };\r\n\r\n    //---onClick event---------\r\n    const handleClick = (e) => {\r\n        //e.prevendivefault();\r\n        const testValue = e.target.id;\r\n\r\n        if(/friendButton/.test(e.target.className))\r\n        {\r\n            /*props.subscript(testValue)*/\r\n            const staySelectFriendButton = selectFriendButton.filter(filter => filter.name !== testValue);\r\n            setSelectFriendButton(staySelectFriendButton);\r\n\r\n            const sever = showSelectedFriend+\" - \"+testValue;\r\n            setShowSelectedFriend(sever)\r\n\r\n        }\r\n        else if(testValue === \"validate\" && inputText.length >= 3){\r\n            //---transformation of the chaine in painting---------\r\n            const splitted = showSelectedFriend.split(' - ');\r\n\r\n            //---inserting the new member's item--------\r\n            const addMember = { name: inputText, friend1: splitted[1], friend2: splitted[2], friend3: splitted[3],\r\n                friend4: splitted[4], friend5: splitted[5], friend6: splitted[6], \r\n                key:\"member_\" + nanoid(6), id:\"member_\" + nanoid(6)};\r\n            \r\n            setListy([...listy, addMember]);\r\n\r\n            setWarningInfos(\"We'll never share your email with anyone else.\");\r\n            setSelectFriendButton(listy);\r\n            setShowSelectedFriend(\"your selected friends are: \");\r\n            setInputText(\"\");\r\n            setBundleDisplay(false);\r\n            settitleValue(\"liste of registered members\");\r\n        }\r\n        else if(testValue === \"registers\"){\r\n            setBundleDisplay(false);\r\n            settitleValue(\"liste of registered members\");\r\n        }\r\n        else if(testValue === \"back\"){\r\n            props.subscribt(testValue);\r\n            setBundleDisplay(true);\r\n            settitleValue(\"Creating of a new account\");\r\n            setSelectFriendButton(listy);\r\n        } \r\n        else if(/avatar/.test(e.target.className))\r\n        {              \r\n            const initTab = listy.filter(filt => filt.id === testValue);\r\n            setAvatarFriendList([...avatarFriendList, initTab]);\r\n            props.subscribt(typeof(initTab));\r\n        }\r\n    };\r\n\r\n    let memberListe;\r\n    //---list of current memberstoggle-----\r\n    if(listy){\r\n        memberListe = listy.map(friend => \r\n            <table className=\"avatar member d-inline-block\" onClick={handleClick} id={friend.id} key={friend.id}>\r\n                <thead className=\"row tyty avatar\">\r\n                    <tr className=\"col-md-12 h6 avatar\" id={friend.id}><td>{friend.name}</td></tr>                    \r\n                </thead> \r\n                <tbody className=\"row avatar\" id={friend.id}>\r\n                    <tr className=\"col-md-12 avata avatar\" id={friend.id}>\r\n                        <td className=\"avatar\">\r\n                            <div className=\"avatar\">\r\n                                <img src={croise} className=\"avatar\" alt=\"logo\" id={friend.id}/>\r\n                            </div>                            \r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n                <tfoot className=\"row stater avatar\" id={friend.id}>\r\n                    <tr className=\"ml-2 avatar\">\r\n                        <td className=\"avatar\">\r\n                            <div className=\"avatar\">\r\n                                <img src={outliner} className=\"connect avatar\" alt=\"logo\" id={friend.id} />\r\n                            </div>                          \r\n                        </td>\r\n                        <td className=\"avatar\"><div className=\"h6 ml-2 mt-2 avatar\" id={friend.id}>{60}</div></td>\r\n                    </tr>                                     \r\n                </tfoot>\r\n            </table>\r\n        );        \r\n    }\r\n\r\n    //---display selecting friend buttons-----\r\n    let selectFriendButtons;\r\n    if(selectFriendButton)\r\n    {\r\n        selectFriendButtons = selectFriendButton.map(avalableFriend => \r\n            <Button variant=\"\" type=\"submit\" className=\"btn btn-outline-secondary ml-1 mb-1 w-25 friendButton\" \r\n                id={avalableFriend.name} onClick={handleClick} key={avalableFriend.key}>\r\n                {avalableFriend.name}\r\n            </Button>       \r\n        );\r\n    }    \r\n\r\n    //---register's member form conster------\r\n    const editTemplete = (<>\r\n        <Form className=\"text-left\">\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label className=\"h4\"><span className=\"\">Creat an account</span></Form.Label>\r\n            <Form.Text className=\"text-muted h6\">\r\n              Type your name here!\r\n            </Form.Text>\r\n            <Form.Control type=\"text\" placeholder=\"Name\" className=\"text-center\"\r\n                value={inputText} onChange={handleChange}/>\r\n          </Form.Group>\r\n          <Form.Text className=\"text-muted h6\">\r\n              Chouse friends!\r\n            </Form.Text>\r\n            <div className=\"text-center mb-3\">{selectFriendButtons}</div>          \r\n            <div className=\"text-left mb-3 h6\">{showSelectedFriend}</div>          \r\n          <Button variant=\"primary\" type=\"button\" className=\"btn btn-dark w-50\"\r\n            id=\"validate\" onClick={handleClick}>\r\n            Validate\r\n          </Button>\r\n          <Button variant=\"primary\" type=\"button\" className=\"btn btn-dark w-25 ml-2\"\r\n            id=\"registers\" onClick={handleClick}>\r\n            Register members\r\n          </Button>          \r\n          <Form.Text className=\"text-muted h6\">\r\n              <span className=\"text-warning\">{warningInfos}.</span>\r\n          </Form.Text>\r\n        </Form>    \r\n    </>); \r\n\r\n    //---viewer's members form--------\r\n    \r\n    const viewTemplete = (<>\r\n        <div className=\"text-center d-inline-block\">            \r\n            <div className=\"row\">\r\n                {memberListe}\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md btn btn-outline-secondary\" id=\"back\" onClick={handleClick}>\r\n                    Add a new member\r\n                </div>\r\n            </div>\r\n            <div className=\"row displayFriends\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"h6 text-capitalize ml-4 text-left\">\r\n                        {\r\n                            avatarFriendList.map(show => {\r\n                                    if(show){\r\n                                       return show.map(sho => {\r\n                                                let fri1,fri2,fri3,fri4,fri5,fri6;\r\n                                                if(sho.friend1 !== undefined){fri1 = \" < \"+sho.friend1};\r\n                                                if(sho.friend2 !== undefined){fri2 = \" < \"+sho.friend2};\r\n                                                if(sho.friend3 !== undefined){fri3 = \" < \"+sho.friend3};\r\n                                                if(sho.friend4 !== undefined){fri4 = \" < \"+sho.friend4};\r\n                                                if(sho.friend5 !== undefined){fri5 = \" < \"+sho.friend5};\r\n                                                if(sho.friend6 !== undefined){fri6 = \" < \"+sho.friend6};\r\n                                                return <div key={\"show_\" + nanoid(6)}>\r\n                                                    <span className=\"font-weight-bold\">{sho.name}</span> \r\n                                                    <span>{fri1}</span> \r\n                                                    <span>{fri2}</span> \r\n                                                    <span>{fri3}</span> \r\n                                                    <span>{fri4}</span> \r\n                                                    <span>{fri5}</span> \r\n                                                    <span>{fri6}</span> \r\n                                                </div>\r\n                                            }\r\n                                        )                                    \r\n                                    }\r\n                                }\r\n                            )\r\n                        }\r\n                    </div>                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>); \r\n\r\n    useEffect(() => { document.title = titleValue});\r\n\r\n    return(<>\r\n            { bundleDisplay ? editTemplete : viewTemplete }\r\n    </>)\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { NvBare, SubscribForm } from './asset/moduls';\n\nfunction App(props) {\n\n  function subscribt(name){\n    console.log(name)\n  }\n\n  return (\n    <div className=\"App container\">\n        <div className=\"row nvbar\">\n          <div className=\"col-md-12\">\n            <NvBare/>            \n          </div>\n        </div>\n        <div className=\"row title\">\n          <div className=\"col-md-5 h2 underline\">\n            Subscription\n          </div>\n        </div>\n        <div className=\"row subscription\">\n          <div className=\"col-md-8\">\n          <SubscribForm memberlist={props.memberlist} friendly={props.friendly} subscribt={subscribt}/>            \n          </div>          \n        </div>\n        <div className=\"row\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst memberlist = [\n  { name: \"Sameer\", friend1: \"Aayushi\", friend2: \"Bhakar\", friend3: undefined, friend4: undefined, friend5: undefined, friend6: undefined, key:\"member_01\", id:\"member_01\"},\n  { name: \"Aayushi\", friend1: \"Sameer\", friend2: undefined, friend3: undefined, friend4: undefined, friend5: undefined, friend6: undefined, key:\"member_012\", id:\"member_012\"},\n  { name: \"Bhakar\", friend1: undefined, friend2: undefined, friend3: undefined, friend4: undefined, friend5: undefined, friend6: undefined, key:\"member_0123\", id:\"member_0123\"}\n];\nconst friendly = [];\nReactDOM.render(\n  <React.StrictMode>\n    <App memberlist={memberlist} friendly={friendly}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfBhakars.\n// Learn more about service workers: https://bit.ly/CRA_PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}